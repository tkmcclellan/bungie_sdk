# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `launchy` gem.
# Please instead update this file by running `bin/tapioca gem launchy`.

module Launchy
  class << self
    def app_for_uri(uri); end
    def app_for_uri_string(s); end
    def application; end
    def application=(app); end
    def bug_report_message; end
    def debug=(d); end
    def debug?; end
    def dry_run=(dry_run); end
    def dry_run?; end
    def extract_global_options(options); end
    def host_os; end
    def host_os=(host_os); end
    def log(msg); end
    def open(uri_s, options = T.unsafe(nil), &error_block); end
    def path; end
    def path=(path); end
    def reset_global_options; end
    def ruby_engine; end
    def ruby_engine=(ruby_engine); end
    def string_to_uri(s); end

    private

    def to_bool(arg); end
  end
end

class Launchy::Application
  extend ::Launchy::DescendantTracker

  def initialize; end

  def find_executable(bin, *paths); end
  def host_os_family; end
  def ruby_engine; end
  def run(cmd, *args); end
  def runner; end

  class << self
    def find_executable(bin, *paths); end
    def handling(uri); end
  end
end

class Launchy::Application::Browser < ::Launchy::Application
  def app_list; end
  def browser_cmdline; end
  def browser_env; end
  def cmd_and_args(uri, options = T.unsafe(nil)); end
  def cygwin_app_list; end
  def darwin_app_list; end
  def nix_app_list; end
  def open(uri, options = T.unsafe(nil)); end
  def windows_app_list; end

  class << self
    def handles?(uri); end
    def schemes; end
  end
end

class Launchy::ApplicationNotFoundError < ::Launchy::Error; end
class Launchy::ArgumentError < ::Launchy::Error; end

class Launchy::Argv
  def initialize(*args); end

  def ==(other); end
  def [](idx); end
  def argv; end
  def blank?; end
  def executable?; end
  def to_s; end
  def to_str; end
  def valid?; end
end

class Launchy::Browser
  def visit(url); end

  private

  def _warn(msg = T.unsafe(nil)); end
  def find_caller_context(stack); end
  def report_caller_context(stack); end

  class << self
    def run(*args); end
  end
end

class Launchy::Cli
  def initialize; end

  def error_output(error); end
  def good_run(argv, env); end
  def options; end
  def parse(argv, env); end
  def parser; end
  def run(argv = T.unsafe(nil), env = T.unsafe(nil)); end
end

class Launchy::CommandNotFoundError < ::Launchy::Error; end

module Launchy::DescendantTracker
  def children; end
  def find_child(method, *args); end
  def inherited(klass); end
end

module Launchy::Detect; end

class Launchy::Detect::HostOs
  def initialize(host_os = T.unsafe(nil)); end

  def default_host_os; end
  def host_os; end
  def override_host_os; end
  def to_s; end
  def to_str; end
end

class Launchy::Detect::HostOsFamily
  extend ::Launchy::DescendantTracker

  def initialize(host_os = T.unsafe(nil)); end

  def cygwin?; end
  def darwin?; end
  def host_os; end
  def nix?; end
  def windows?; end

  class << self
    def cygwin?; end
    def darwin?; end
    def detect(host_os = T.unsafe(nil)); end
    def matches?(host_os); end
    def nix?; end
    def windows?; end
  end
end

class Launchy::Detect::HostOsFamily::Cygwin < ::Launchy::Detect::HostOsFamily
  def app_list(app); end

  class << self
    def matching_regex; end
  end
end

class Launchy::Detect::HostOsFamily::Darwin < ::Launchy::Detect::HostOsFamily
  def app_list(app); end

  class << self
    def matching_regex; end
  end
end

class Launchy::Detect::HostOsFamily::Nix < ::Launchy::Detect::HostOsFamily
  def app_list(app); end

  class << self
    def matching_regex; end
  end
end

class Launchy::Detect::HostOsFamily::NotFoundError < ::Launchy::Error; end

class Launchy::Detect::HostOsFamily::Windows < ::Launchy::Detect::HostOsFamily
  def app_list(app); end

  class << self
    def matching_regex; end
  end
end

class Launchy::Detect::NixDesktopEnvironment
  extend ::Launchy::DescendantTracker

  class << self
    def browsers; end
    def detect; end
    def fallback_browsers; end
  end
end

class Launchy::Detect::NixDesktopEnvironment::Gnome < ::Launchy::Detect::NixDesktopEnvironment
  class << self
    def browser; end
    def is_current_desktop_environment?; end
  end
end

class Launchy::Detect::NixDesktopEnvironment::Kde < ::Launchy::Detect::NixDesktopEnvironment
  class << self
    def browser; end
    def is_current_desktop_environment?; end
  end
end

class Launchy::Detect::NixDesktopEnvironment::NotFound < ::Launchy::Detect::NixDesktopEnvironment
  class << self
    def browser; end
    def is_current_desktop_environment?; end
  end
end

class Launchy::Detect::NixDesktopEnvironment::NotFoundError < ::Launchy::Error; end

class Launchy::Detect::NixDesktopEnvironment::Xdg < ::Launchy::Detect::NixDesktopEnvironment
  class << self
    def browser; end
    def is_current_desktop_environment?; end
  end
end

class Launchy::Detect::NixDesktopEnvironment::Xfce < ::Launchy::Detect::NixDesktopEnvironment
  class << self
    def browser; end
    def is_current_desktop_environment?; end
  end
end

class Launchy::Detect::RubyEngine
  extend ::Launchy::DescendantTracker

  def initialize(ruby_engine = T.unsafe(nil)); end

  def ruby_engine; end
  def to_s; end

  class << self
    def detect(ruby_engine = T.unsafe(nil)); end
    def is_current_engine?(ruby_engine); end
    def jruby?; end
    def macruby?; end
    def mri?; end
    def rbx?; end
    def ruby_engine_error_message(ruby_engine); end
  end
end

class Launchy::Detect::RubyEngine::Jruby < ::Launchy::Detect::RubyEngine
  class << self
    def engine_name; end
  end
end

class Launchy::Detect::RubyEngine::MacRuby < ::Launchy::Detect::RubyEngine
  class << self
    def engine_name; end
  end
end

class Launchy::Detect::RubyEngine::Mri < ::Launchy::Detect::RubyEngine
  class << self
    def engine_name; end
    def is_current_engine?(ruby_engine); end
  end
end

class Launchy::Detect::RubyEngine::NotFoundError < ::Launchy::Error; end

class Launchy::Detect::RubyEngine::Rbx < ::Launchy::Detect::RubyEngine
  class << self
    def engine_name; end
  end
end

class Launchy::Detect::Runner
  extend ::Launchy::DescendantTracker

  def commandline_normalize(cmdline); end
  def dry_run(cmd, *args); end
  def run(cmd, *args); end
  def shell_commands(cmd, args); end

  class << self
    def detect; end
  end
end

class Launchy::Detect::Runner::Forkable < ::Launchy::Detect::Runner
  def child_pid; end
  def wet_run(cmd, *args); end

  private

  def close_file_descriptors; end
  def exec_or_raise(cmd, *args); end
end

class Launchy::Detect::Runner::Jruby < ::Launchy::Detect::Runner
  def wet_run(cmd, *args); end
end

class Launchy::Detect::Runner::NotFoundError < ::Launchy::Error; end

class Launchy::Detect::Runner::Windows < ::Launchy::Detect::Runner
  def all_args(cmd, *args); end
  def dry_run(cmd, *args); end
  def shell_commands(cmd, *args); end
  def wet_run(cmd, *args); end
end

class Launchy::Error < ::StandardError; end
Launchy::VERSION = T.let(T.unsafe(nil), String)

module Launchy::Version
  class << self
    def to_a; end
    def to_s; end
  end
end

Launchy::Version::MAJOR = T.let(T.unsafe(nil), Integer)
Launchy::Version::MINOR = T.let(T.unsafe(nil), Integer)
Launchy::Version::PATCH = T.let(T.unsafe(nil), Integer)
